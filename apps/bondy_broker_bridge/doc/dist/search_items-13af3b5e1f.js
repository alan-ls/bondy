searchNodes=[{"doc":"This module defines the behaviour for providing event bridging functionality, allowing a supervised process (implemented via bondy_subscriber) to consume WAMP events based on a normal subscription to publish (or produce) those events to an external system, e.g. another message broker, by previously applying a transformation specification based on a templating language.. Each broker bridge is implemented as a callback module exporting a predefined set of callback functions.","ref":"bondy_broker_bridge.html","title":"bondy_broker_bridge","type":"behaviour"},{"doc":"","ref":"bondy_broker_bridge.html#c:apply_action/1","title":"bondy_broker_bridge.apply_action/1","type":"callback"},{"doc":"","ref":"bondy_broker_bridge.html#c:init/1","title":"bondy_broker_bridge.init/1","type":"callback"},{"doc":"","ref":"bondy_broker_bridge.html#c:terminate/2","title":"bondy_broker_bridge.terminate/2","type":"callback"},{"doc":"","ref":"bondy_broker_bridge.html#c:validate_action/1","title":"bondy_broker_bridge.validate_action/1","type":"callback"},{"doc":"","ref":"bondy_broker_bridge_app.html","title":"bondy_broker_bridge_app","type":"module"},{"doc":"","ref":"bondy_broker_bridge_app.html#start/2","title":"bondy_broker_bridge_app.start/2","type":"function"},{"doc":"","ref":"bondy_broker_bridge_app.html#stop/1","title":"bondy_broker_bridge_app.stop/1","type":"function"},{"doc":"","ref":"bondy_broker_bridge_event.html","title":"bondy_broker_bridge_event","type":"module"},{"doc":"","ref":"bondy_broker_bridge_event.html#new/3","title":"bondy_broker_bridge_event.new/3","type":"function"},{"doc":"","ref":"bondy_broker_bridge_event.html#t:id/0","title":"bondy_broker_bridge_event.id/0","type":"type"},{"doc":"","ref":"bondy_broker_bridge_event.html#t:uri/0","title":"bondy_broker_bridge_event.uri/0","type":"type"},{"doc":"","ref":"bondy_broker_bridge_event.html#t:wamp_event/0","title":"bondy_broker_bridge_event.wamp_event/0","type":"type"},{"doc":"This module provides event bridging functionality, allowing a supervised process (implemented via bondy_subscriber) to subscribe to WAMP events and process and/or forward those events to an external system, e.g. publish to another message broker. A subscription can be created at runtime using the subscribe/5 , or at system boot time by setting the application's config_file environment variable which should have the filename of a valid Broker Bridge Specification File. Each broker bridge is implemented as a module implementing the bondy_broker_bridge behaviour. ## Action Specification Map. ## mops Evaluation Context The mops context is map containing the following: erlang \#{ &lt;&lt; &quot;broker&quot; &gt;&gt; =&gt; \#{ &lt;&lt; &quot;node&quot; &gt;&gt; =&gt; binary ( ) &lt;&lt; &quot;agent&quot; &gt;&gt; =&gt; binary ( ) } , &lt;&lt; &quot;event&quot; &gt;&gt; =&gt; \#{ &lt;&lt; &quot;realm&quot; &gt;&gt; =&gt; uri ( ) , &lt;&lt; &quot;topic&quot; &gt;&gt; =&gt; uri ( ) , &lt;&lt; &quot;subscription_id&quot; &gt;&gt; =&gt; integer ( ) , &lt;&lt; &quot;publication_id&quot; &gt;&gt; =&gt; integer ( ) , &lt;&lt; &quot;details&quot; &gt;&gt; =&gt; map ( ) , % WAMP EVENT.details &lt;&lt; &quot;args&quot; &gt;&gt; =&gt; list ( ) , &lt;&lt; &quot;kwargs&quot; &gt;&gt; =&gt; map ( ) , &lt;&lt; &quot;ingestion_timestamp&quot; &gt;&gt; =&gt; integer ( ) } } . ## Broker Bridge Specification File. Example: json { &quot;id&quot; : &quot;com.leapsight.test&quot; , &quot;meta&quot; : { } , &quot;subscriptions&quot; : [ { &quot;bridge&quot; : &quot;bondy_kafka_bridge&quot; , &quot;match&quot; : { &quot;realm&quot; : &quot;com.leapsight.test&quot; , &quot;topic&quot; : &quot;com.leapsight.example_event&quot; , &quot;options&quot; : { &quot;match&quot; : &quot;exact&quot; } } , &quot;action&quot; : { &quot;type&quot; : &quot;produce_sync&quot; , &quot;topic&quot; : &quot;{{kafka.topics.wamp_events}}&quot; , &quot;key&quot; : &quot;\\&quot;{{event.topic}}/{{event.publication_id}}\\&quot;&quot; , &quot;value&quot; : &quot;{{event}}&quot; , &quot;options&quot; : { &quot;client_id&quot; : &quot;default&quot; , &quot;acknowledge&quot; : true , &quot;required_acks&quot; : &quot;all&quot; , &quot;partition&quot; : null , &quot;partitioner&quot; : { &quot;algorithm&quot; : &quot;fnv32a&quot; , &quot;value&quot; : &quot;\\&quot;{{event.topic}}/{{event.publication_id}}\\&quot;&quot; } , &quot;encoding&quot; : &quot;json&quot; } } } ] }","ref":"bondy_broker_bridge_manager.html","title":"bondy_broker_bridge_manager","type":"module"},{"doc":"Returns the bridge configuration identified by its module name.","ref":"bondy_broker_bridge_manager.html#bridge/1","title":"bondy_broker_bridge_manager.bridge/1","type":"function"},{"doc":"Lists all the configured bridge configurations.","ref":"bondy_broker_bridge_manager.html#bridges/0","title":"bondy_broker_bridge_manager.bridges/0","type":"function"},{"doc":"","ref":"bondy_broker_bridge_manager.html#code_change/3","title":"bondy_broker_bridge_manager.code_change/3","type":"function"},{"doc":"","ref":"bondy_broker_bridge_manager.html#handle_call/3","title":"bondy_broker_bridge_manager.handle_call/3","type":"function"},{"doc":"","ref":"bondy_broker_bridge_manager.html#handle_cast/2","title":"bondy_broker_bridge_manager.handle_cast/2","type":"function"},{"doc":"","ref":"bondy_broker_bridge_manager.html#handle_continue/2","title":"bondy_broker_bridge_manager.handle_continue/2","type":"function"},{"doc":"","ref":"bondy_broker_bridge_manager.html#handle_info/2","title":"bondy_broker_bridge_manager.handle_info/2","type":"function"},{"doc":"","ref":"bondy_broker_bridge_manager.html#init/1","title":"bondy_broker_bridge_manager.init/1","type":"function"},{"doc":"Parses the provided Broker Bridge Specification and creates all the provided subscriptions.","ref":"bondy_broker_bridge_manager.html#load/1","title":"bondy_broker_bridge_manager.load/1","type":"function"},{"doc":"Internal function called by bondy_broker_bridge_sup.","ref":"bondy_broker_bridge_manager.html#start_link/0","title":"bondy_broker_bridge_manager.start_link/0","type":"function"},{"doc":"Creates a subscription using bondy_broker. This results in a new supervised bondy_subscriber processed that subcribes to {Realm, Topic} and forwards any received publication (event) to the bridge identified by Bridge . Returns the tuple {ok, Pid} where Pid is the pid() of the supervised process or the tuple {error, Reason}.","ref":"bondy_broker_bridge_manager.html#subscribe/5","title":"bondy_broker_bridge_manager.subscribe/5","type":"function"},{"doc":"","ref":"bondy_broker_bridge_manager.html#subscriptions/1","title":"bondy_broker_bridge_manager.subscriptions/1","type":"function"},{"doc":"","ref":"bondy_broker_bridge_manager.html#terminate/2","title":"bondy_broker_bridge_manager.terminate/2","type":"function"},{"doc":"","ref":"bondy_broker_bridge_manager.html#unsubscribe/1","title":"bondy_broker_bridge_manager.unsubscribe/1","type":"function"},{"doc":"","ref":"bondy_broker_bridge_manager.html#validate_spec/1","title":"bondy_broker_bridge_manager.validate_spec/1","type":"function"},{"doc":"","ref":"bondy_broker_bridge_manager.html#t:bridge/0","title":"bondy_broker_bridge_manager.bridge/0","type":"type"},{"doc":"","ref":"bondy_broker_bridge_manager.html#t:id/0","title":"bondy_broker_bridge_manager.id/0","type":"type"},{"doc":"","ref":"bondy_broker_bridge_manager.html#t:subscription_detail/0","title":"bondy_broker_bridge_manager.subscription_detail/0","type":"type"},{"doc":"","ref":"bondy_broker_bridge_manager.html#t:uri/0","title":"bondy_broker_bridge_manager.uri/0","type":"type"},{"doc":"","ref":"bondy_broker_bridge_sup.html","title":"bondy_broker_bridge_sup","type":"module"},{"doc":"","ref":"bondy_broker_bridge_sup.html#init/1","title":"bondy_broker_bridge_sup.init/1","type":"function"},{"doc":"","ref":"bondy_broker_bridge_sup.html#start_link/0","title":"bondy_broker_bridge_sup.start_link/0","type":"function"},{"doc":"","ref":"bondy_kafka_bridge.html","title":"bondy_kafka_bridge","type":"module"},{"doc":"Evaluates the action specification Action against the context Ctxt using mops and produces to Kafka.","ref":"bondy_kafka_bridge.html#apply_action/1","title":"bondy_kafka_bridge.apply_action/1","type":"function"},{"doc":"Initialises the Kafka clients provided by the configuration.","ref":"bondy_kafka_bridge.html#init/1","title":"bondy_kafka_bridge.init/1","type":"function"},{"doc":"","ref":"bondy_kafka_bridge.html#terminate/2","title":"bondy_kafka_bridge.terminate/2","type":"function"},{"doc":"Validates the action specification. An action spec is a map containing the following keys: * type :: binary() - &lt;&lt;&quot;produce_sync&quot;&gt;&gt; . Optional, the default value is &lt;&lt;&quot;produce_sync&quot;&gt;&gt; . * topic :: binary() - the Kafka topic we should produce to. * key :: binary() - the kafka message's key * value :: any() - the kafka message's value * options :: map() - a map containing the following keys erlang \#{ &lt;&lt; &quot;type&quot; &gt;&gt; &lt;&lt; &quot;produce&quot; &gt;&gt; , &lt;&lt; &quot;topic&quot; : &lt;&lt; &quot;com.magenta.wamp_events&quot; , &lt;&lt; &quot;key&quot; : &quot;\\&quot;{{event.topic}}/{{event.publication_id}}\\&quot;&quot; , &lt;&lt; &quot;value&quot; : &quot;{{event}}&quot; , &lt;&lt; &quot;options&quot; : { &lt;&lt; &quot;client_id&quot; : &quot;default&quot; , &lt;&lt; &quot;acknowledge&quot; : true , &lt;&lt; &quot;required_acks&quot; : &quot;all&quot; , &lt;&lt; &quot;partition&quot; : null , &lt;&lt; &quot;partitioner&quot; : { &quot;algorithm&quot; : &quot;fnv32a&quot; , &quot;value&quot; : &quot;\\&quot;{{event.topic}}/{{event.publication_id}}\\&quot;&quot; } , &lt;&lt; &quot;encoding&quot; &gt;&gt; : &lt;&lt; &quot;json&quot; &gt;&gt; } }","ref":"bondy_kafka_bridge.html#validate_action/1","title":"bondy_kafka_bridge.validate_action/1","type":"function"},{"doc":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. &quot;License&quot; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. &quot;Licensor&quot; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. &quot;Legal Entity&quot; shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, &quot;control&quot; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. &quot;You&quot; (or &quot;Your&quot;) shall mean an individual or Legal Entity exercising permissions granted by this License. &quot;Source&quot; form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. &quot;Object&quot; form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. &quot;Work&quot; shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). &quot;Derivative Works&quot; shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. &quot;Contribution&quot; shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, &quot;submitted&quot; means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as &quot;Not a Contribution.&quot; &quot;Contributor&quot; shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a &quot;NOTICE&quot; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets &quot;{}&quot; replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same &quot;printed page&quot; as the copyright notice for easier identification within third-party archives. Copyright (c) 2020 Leapsight. All rights reserved. Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","ref":"license.html","title":"LICENSE","type":"extras"},{"doc":"The Distributed WAMP Router and API Gateway Bondy is an open source, distributed, scaleable and robust networking platform for microservices and IoT applications written in Erlang. It implements the open Web Application Messaging Protocol (WAMP) offering both Publish and Subscribe (PubSub) and routed Remote Procedure Calls (RPC) comunication patterns. Bondy is Apache2 licensed. :warning: Notice for Contributors Active development is done at Bondy's Gitlab repository ( https://gitlab.com/leapsight/bondy). &lt;br&gt;&lt;br&gt;If you are reading this file at Bondy's Github repository, notice this is a mirror that is unidirectionally synced to Gitlab's i.e. no commits or PRs done in Github will be synced to the main Gitlab repository .","ref":"readme.html","title":"Bondy","type":"extras"},{"doc":"For our work-in-progress documentation go to http://docs.getbondy.io .","ref":"readme.html#documentation","title":"Bondy - Documentation","type":"extras"},{"doc":"Requirements Erlang 23.3.4.7 or later Rebar3 3.17.0 or later openssl libssl Libsodium On Linux apt-get update -y apt-get -y install build-essential libssl-dev openssl libsodium-dev Run a first node We will start a node named bondy1@127.0.0.1 which uses the following variables from the config file ( config/test/node_1_vars.config ). Transport Description Port HTTP REST API GATEWAY 18080 HTTP REST API GATEWAY 18083 HTTP REST Admin API 18081 HTTPS REST Admin API 18084 Websockets WAMP 18080 TCP WAMP Raw Socket 18082 TLS WAMP Raw Socket 18085 make node1 Create a Realm WAMP is a session-based protocol. Each session belongs to a Realm. curl -X &quot;POST&quot; &quot;http://localhost:18081/realms/&quot; \\ -H 'Content-Type: application/json; charset=utf-8' \\ -H 'Accept: application/json; charset=utf-8' \\ -d $'{ &quot;uri&quot;: &quot;com.myrealm&quot;, &quot;description&quot;: &quot;My First Realm&quot; }' Disable Security We will disable security to avoid setting up credentials at this moment. curl -X &quot;DELETE&quot; &quot;http://localhost:18081/realms/com.myrealm/security_enabled&quot; \\ -H 'Content-Type: application/json; charset=utf-8' \\ -H 'Accept: application/json; charset=utf-8' Run a second node We start a second node named bondy2@127.0.0.1 which uses the following variables from the config file ( config/test/node_2_vars.config ). Transport Description Port HTTP REST API GATEWAY 18180 HTTP REST API GATEWAY 18183 HTTP REST Admin API 18181 HTTPS REST Admin API 18184 Websockets WAMP 18180 TCP WAMP Raw Socket 18182 TLS WAMP Raw Socket 18185 make node2 Connect the two nodes In bondy1@127.0.0.1 erlang's shell type: ( bondy2 @ 127.0 . 0.1 ) 1 &gt; bondy_peer_service : join ( &#39;bondy2@127.0.0.1&#39; ) . All new state changes will be propagated in real-time through gossip. One minute after joining the cluster, the Active Anti-entropy service will trigger an exchange after which the Realm we have created in bondy1@127.0.0.1 will have been replicated to bondy2@127.0.0.1 .","ref":"readme.html#quick-start","title":"Bondy - Quick Start","type":"extras"},{"doc":"http://docs.getbondy.io . WAMP Specification #bondy on slack (coming soon!) Follow us on twitter @leapsight Recorded webinars Implementing a polyglot microservices architecture &lt;br&gt;Date: 10 July 2019 Copyright (c) 2016-2021 Leapsight. All rights reserved.","ref":"readme.html#resources","title":"Bondy - Resources","type":"extras"},{"doc":"","ref":"changelog.html","title":"CHANGELOG","type":"extras"},{"doc":"Added General Upgraded to OTP 24 Security WAMP Cryptosign authentication WAMP Ticket-based authentication Same Sign-on and Single Sign-on (SSO Realms) Realm Prototypes Added libsodium (enacl lib) Bondy Edge Fixed Fixes group ordering issue in processing of security (realm) configuration files. bondy_realm topological ordering of groups within each realm according to their group membership relationship. If any cycles are found amongst groups, an error is raised. Existing groups referred by name in the group's 'group' property are not fetched, so cycles might still be created once the new groups are stored on the database. Fixes a concurrency issue with busy clients, in particular when they end up calling themselves. This was produced by an unnecesary used of internal acknowledgments which have been removed WAMP Erlang encoding now enforces WAMP-compatible data structures and tries to convert certain types e.g. pids while it fails with others. Changed Realm database representation User database representation Error types and description improvements Logging improvements Removed high cardinality labels in promethues metrics (before we would tag each WAMP message stats with realm, session, message type etc. this is not good for stats databases like Promethues). Added RBAC context caching to avoid computing the user grants on every request.","ref":"changelog.html#1-0-0-beta","title":"CHANGELOG - 1.0.0-beta","type":"extras"},{"doc":"Security The RBAC context cache is not evicted or refreshed when a user is assigned to new realms or granted new permissions.","ref":"changelog.html#known-issues","title":"CHANGELOG - Known Issues","type":"extras"},{"doc":"Added bondy.subscription.list procedure First verstion of Retained messages Added a non-standard WAMP Authentication method oauth2 based on OAuth2 JWT Tokens Is equivalent to WAMP-Ticket authentication method but expects the secret to be a JWT produced by Bondy OAuth2 authid property value needs to be present and needs to match the JWT’s sub property value Added Bondy specific load balancing strategies through the standard REGISTER.Options.invoke option: queue_least_loaded quede_least_loaded_sample jump_consistent_hash (MUST not be used as this is experimental and the implementation will change with upcoming definitions from WAMP Specification) Aded support for WS compression now supports permessage-deflate websocket extension and enabled by default added configuration option wamp.websocket.compression_enabled added configuration option wamp.websocket.deflate.level added configuration option wamp.websocket.deflate.mem_level added configuration option wamp.websocket.deflate.strategy added configuration option wamp.websocket.deflate.server_context_takeover added configuration option wamp.websocket.deflate.client_max_window_bits added configuration option wamp.websocket.idle_timeout added configuration option bondy.wamp_websocket.max_frame_size Not working with Mozilla as it seems to be sending a corrupted PING message Fixed Minor WAMP protocol fixes Several bug fixes during removal of an API Specification Removal did not rebuilt the web server dispatch tables and thus the API removed was still active until reboot. Cleanup of session data when web server processes crash abnormally Changed Upgraded to Erlang 23 Security data structures Security methods (more methods added and a clear distinction between 'anontmous' and 'trust')","ref":"changelog.html#0-9-0","title":"CHANGELOG - 0.9.0","type":"extras"},{"doc":"Added API Gateway The API specification body object now supports any external-friendly data type e.g. erlang tuples, pids, references excluded. Fixes a bug in the validation of the response body which failed in case the body was not a MOPS expression, a binary or map. Now all external-friendly types are allows e.g. numbers, booleans, strings, binaries, maps, lists and MOPS expressions. This allows to return static content i.e. not a result of evaluating a MOPS expression in any given type of action. Upgraded MOPS which has better error reporting and support for a new function random(N) which returns N random members from a list. If the value random is applied is static, this will yield the same results on every request. Fixed API Gateway Minor fixes to enhance error handling and logging Fixed a case where an invalid API Specification can crash the gateway process during startup Configuration Fixed an error in which private/default lager configuration would override user configuration (bondy.conf) OAuth2 Fixed a bug on the removal of refresh token indices during refresh token revocation. Clustering Fixed missing handler for WAMP ERROR(CALL) messages forwarded by a peer node Changed Configuration The WAMP raw socket serialiser slot assignment is now configurable. Bondy provides Erlang (erl) and BERT serialisers in addition to JSON and Messagepack. This change allows the user to configure to which of the 13 available slots (3..15) are those serialisers mapped to.","ref":"changelog.html#0-8-8","title":"CHANGELOG - 0.8.8","type":"extras"},{"doc":"Added Added a controlled phased startup process Bondy now starts in phases allowing to block on several steps using configuration parameters. The main benefit is to avoid starting up the WAMP client socket listeners before serveral subsystems have finish initialisation and/or some processes have been completed. startup.wait_for_store_partitions - controls whether to block further stages until all db partitions have been initialised, this includes loading all data into those entities stored in ram and disk. Default is on . startup.wait_for_store_hashtrees - defines whether Bondy will wait for the db hashtrees to be built before continuing with initialisation. Default is on . startup.wait_for_store_aae_exchange - Defines whether Bondy will wait for the first active anti-entropy exchange to be finished before continuing with initialisation. These only works if Bondy is part of a cluster i.e. when Peer Discovery and Automatic Cluster join is enabled. The Bondy Admin HTTP API listeners are started as soon as the store partitions and other subsystems are initilised. This allows for liveness probes to be able to check on Bondy and/or admin users to inspect and/or operate while the other phases are running. Fixed Several fixes to Security Configuration file format sources.usernames now takes a string &quot;any&quot; of a list of usernames, including &quot;anonymous&quot; grants.roles now takes a string &quot;any&quot; of a list of rolenames, including &quot;anonymous&quot;","ref":"changelog.html#0-8-7","title":"CHANGELOG - 0.8.7","type":"extras"},{"doc":"First implementation of Peer Discovery and Automatic Cluster join. Implementation of DNS srv based discovery tested to work with Kubernetes DNS Finished Bondy Broker schema specification Added authorization controls for all WAMP verbs (register, unregister, call, cancel, publish, subscribe and unsubscribe). Authorization is managed by the existing Security subsystem which now can be configured using JSON files defined in the bondy.conf file (in addition to the WAMP and HTTP/REST APIs). Fixed WAMPRA (with salted password) authentication method. This requires a rehash of the existing passwords. If you are migrating from an existing Bondy installation, the migration occurs lazily on the new user login (as we need the user to provide the password for Bondy to be able to rehash, as Bondy never stores clear text passwords). Refactoring of configuration via bondy.conf Removed legacy config options, Renamed a few a config options and introduced new ones to support static configuration via JSON files and new features like Peer Discovery and Automatic Cluster join.","ref":"changelog.html#0-8-6","title":"CHANGELOG - 0.8.6","type":"extras"},{"doc":"Migration to OTP 21.3 or higher. Upgraded all dependencies to support OTP 21","ref":"changelog.html#0-8-2","title":"CHANGELOG - 0.8.2","type":"extras"},{"doc":"This version includes a complete redesign of event management and instrumentation. The new bondy_event_manager is now the way for the different subsystems to asynchronously publish events (notifications) and offload all instrumentation to event handlers: bondy_promethues is an event handler that implements all promethues instrumentation bondy_wamp_meta_events is an event handler that selectively re-published bondy events to WAMP Meta events. New Modules bondy_event_manager implements a form of supervised handlers similar to lager (logging library), by spawning a &quot;watcher&quot; processes per handler (module) under a supervision tree and restarting it when it crashes. bondy_alarm_handler replaces sasl’s default alarm_handler. Deprecated Modules bondy_stats containing legacy exometer instrumentation was removed.","ref":"changelog.html#0-8-1","title":"CHANGELOG - 0.8.1","type":"extras"},{"doc":"This version introduces an incompatibility with previous versions data storage. If you want to upgrade an existing installation you will need to use the bondy_backup module's functions or the Admin Backup API. Upgrade to plum_db 0.2.0 which introduces prefix types to determine which storage type to use with the following types supported: ram (ets-based storage), disk (leveledb) and ram_disk(ets and leveldb). Registry uses ram storage type All security resources use ram_disk storage type Api Gateway (specs) and OAuth2 tokens use disk storage type Handling of migration in bondy_backup. To migrate from v0.7.1 perform a backup on Bondy v0.7.1 and then restore it on Bondy v0.7.2.","ref":"changelog.html#0-8-0","title":"CHANGELOG - 0.8.0","type":"extras"},{"doc":"New Trie data structure for bondy_registry Bondy now uses Leapsight's art library to implement the registry index structure use to match RPC calls and PubSub subscriptions. art provides a single-writter, multi-reader Radix Trie following the Adaptive Radix Tree algorithm. The implementation uses one gen_server and one ets table per trie and currently supports WAMP exact and prefix matching strategies. wildcard matching support is on its way. Internal wamp subscriptions We have implemented a first version of an internal WAMP subscription so that Bondy internally can subscribe to WAMP events. This is done through new functions in bondy_broker and the new module bondy_broker_events OAuth 2 Security Major changes to security subsytem including harmonisation of APIs, deduplication and bug fixes. Use new internal wamp subscriptions to avoid coupling Bondy Security with Bondy API Gateway &amp; OAuth. Bondy Security modules publishe wamp events on entity actions e.g. user creation, deletion, etc. Bondy API Gateway modules and bondy_api_gateway_client subscribe to the user delete events to cleanup OAuth tokens Fixed a bug where internal security operations will not trigger token revocation. Bondy API Gateway modules, i.e. are now implemented by calling Bondy Security modules e.g. bondy_security_user instead of calling bondy_security (former Basho Riak Core Security) directly. This will help in the refactoring of bondy_security and in addition all event publishing is centralised in bondy_security_user. Implemented additional index for tokens to enable deletion of all users’ tokens Added two db maintenance functions to (i) remove dangling tokens and (ii) rebuild the indices on an existing db Added additional Internal wamp events to subsystems e.g. bondy_realm and bondy_backup","ref":"changelog.html#0-7-1","title":"CHANGELOG - 0.7.1","type":"extras"},{"doc":"Clustering Completion of clustering implementation using partisan library (at the moment supporting the default peer service only, hyparview to be considered in the future) bondy_router can now route WAMP messages across nodes. The internal load balancer prefers local callees by default, only when a local callee is not found for a procedure the invocation is routed to another node. Load balancer state is local and not replicated. Future global load balancing strategies based on ant-colony optimisation to be considered in the future. bondy-admin (bondy_cli) implementation of cluster management commands (join, leave, kick-out and members) Storage and Replication new storage based on plum_db which uses lasp-lang/plumtree and lasp-lang/partisan to support data replication provides more concurrency than plumtree and removes the capacity limitation imposed by the use of dets API Gateway API Specs are replicated using plum_db. A single bondy_api_gateway gen_server process rebuilds the Cowboy dispatch table when API Spec updates are received from other nodes in the cluster (using plum_db pubsub capabilities) Registry The registry entries are replicated using plum_db. This is not ideal as we are using disk for transient data but it is a temporary solution for replication and AAE, as we are planning to change the registry by a new implementation of a trie data structure at which point we might use plumtree and partisan directly avoiding storing to disk. A single bondy_registry gen_server process rebuilds the in-memory indices when entry updates are received from other nodes in the cluster (using plum_db pubsub capabilities) bondy_backup A new module that allows to backup the contents of the database to a file, and restore it. Allows to migrate from previous versions that use plumtree (dets) to plum_db","ref":"changelog.html#0-7-0","title":"CHANGELOG - 0.7.0","type":"extras"},{"doc":"General Removed unused modules Minor error description fixes Code tidy up Depencies cowboy, hackney, jsx, sidejob, promethus, lager and other dependencies upgraded Oauth2 Revoke refresh_token Added client_device_id optional parameter for token request which will generate an inde mapping a Username/ClientDeviceId to a refresh_token to enabled revoking token by Username/ClientDeviceId. JWT.iat property using unix erlang:system_time/1 instead of erlang:monotonic_time/1 (as users might want to use this property) Token expiration is now configured via cuttlefish API Gateway JSON errors no longer include the status_code property (this was redundant with HTTP Status Code and were sometimes inconsistent) Added http_method in forward actions to enable transforming the upstream HTTP request method e.g. a GET can be transformed to a POST API Gateway Spec now allows to use a mop expression for WAMP procedure URIs New mops functions: min, max and nth on lists (equivalent to the lists module functions) Testing Fixed mops suite bugs Added oauth2 refresh_token CRUD test case, covering creation, refresh and revoke by token and by user/client_device_id","ref":"changelog.html#0-6-6","title":"CHANGELOG - 0.6.6","type":"extras"},{"doc":"Upgraded Cowboy dependency to 2.1.0 Upgraded promethues_cowboy to latest and added cowboy metrics to prometheus endpoint Minor changes in function naming for enhanced understanding Minor fixes in options and defaults","ref":"changelog.html#0-6-3","title":"CHANGELOG - 0.6.3","type":"extras"},{"doc":"","ref":"wamp.html","title":"Web Application Messaging Protocol","type":"extras"}]